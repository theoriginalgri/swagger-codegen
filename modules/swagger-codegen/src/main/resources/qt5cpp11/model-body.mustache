{{>licenseInfo}}
{{#models}}{{#model}}
#include "{{classname}}.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace Swagger {


{{classname}}::{{classname}}()
:{{#vars}} m_{{name}}({{defaultValue}}){{#hasMore}},{{/hasMore}}
{{/vars}}
{
}

{{classname}}::~{{classname}}()
{
    {{#vars}}
    {{#vendorExtensions.x-codegen-isPointer}}
    delete m_{{name}};
    {{/vendorExtensions.x-codegen-isPointer}}
    {{#isContainer}}
    {{#vendorExtensions.x-codegen-inner-isPointer}}
    qDeleteAll(m_{{name}});
    {{/vendorExtensions.x-codegen-inner-isPointer}}
    {{/isContainer}}
    {{/vars}}
}

QJsonObject {{classname}}::toJson() const
{
    QJsonObject jsonObject;
    {{#vars}}
    {{#vendorExtensions.x-codegen-isPointer}}
    if (m_{{name}}) {
        jsonObject.insert("{{name}}", m_{{name}}->toJson());
    }
    {{/vendorExtensions.x-codegen-isPointer}}
    {{^vendorExtensions.x-codegen-isPointer}}
    {{#isContainer}}
    {
        QJsonArray array;
        for({{complexType}}{{#vendorExtensions.x-codegen-inner-isPointer}}*{{/vendorExtensions.x-codegen-inner-isPointer}} item : m_{{name}}) {
            {{#vendorExtensions.x-codegen-inner-isPointer}}
            array.append(item->toJson());
            {{/vendorExtensions.x-codegen-inner-isPointer}}
            {{^vendorExtensions.x-codegen-inner-isPointer}}
            array.append(item);
            {{/vendorExtensions.x-codegen-inner-isPointer}}
        }
        jsonObject.insert("{{name}}", array);
    }
    {{/isContainer}}
    {{^isContainer}}
    jsonObject.insert("{{name}}", m_{{name}});
    {{/isContainer}}
    {{/vendorExtensions.x-codegen-isPointer}}
    {{/vars}}

    return jsonObject;
}

{{classname}} *{{classname}}::fromJson(const QJsonObject &json)
{
    if (!json.isObject()) {
        return nullptr;
    }

    {{classname}} *p = new {{classname}};

    {{#vars}}
    {{#vendorExtensions.x-codegen-isPointer}}
    p->{{setter}}({{baseType}}::fromJson(json.toObject("{{name}}")));
    {{/vendorExtensions.x-codegen-isPointer}}
    {{^vendorExtensions.x-codegen-isPointer}}
    {{#isContainer}}
    {
        {{baseType}}<{{complexType}}{{#vendorExtensions.x-codegen-inner-isPointer}} *{{/vendorExtensions.x-codegen-inner-isPointer}}> list;
        for (QJsonValue value : json.toArray("{{name}}")) {
        {{#vendorExtensions.x-codegen-inner-isPointer}}
            list << {{complexType}}::fromJson(value.toObject());
        {{/vendorExtensions.x-codegen-inner-isPointer}}
        {{^vendorExtensions.x-codegen-inner-isPointer}}
            list << value.{{vendorExtensions.x-codegen-inner-conversionFunction}}();
        {{/vendorExtensions.x-codegen-inner-isPointer}}
        }
        p->{{setter}}(list);
    }
    {{/isContainer}}
    {{^isContainer}}
    p->{{setter}}(json.{{vendorExtensions.x-codegen-conversionFunction}}("{{name}}"));
    {{/isContainer}}
    {{/vendorExtensions.x-codegen-isPointer}}
    {{/vars}}

    return p;
}

{{#vars}}
{{{datatype}}} {{classname}}::{{name}}() const {
    return m_{{name}};
}

void {{classname}}::{{setter}}({{{datatype}}} {{name}}) {
    m_{{name}} = {{name}};
}

{{/vars}}


} /* namespace Swagger */

{{/model}}
{{/models}}
