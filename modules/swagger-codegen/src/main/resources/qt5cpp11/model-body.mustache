{{>licenseInfo}}
{{#models}}{{#model}}
#include "{{classname}}.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace Swagger {

template<bool>
struct ToJsonImpl;

template <>
struct ToJsonImpl<0> {
    template <typename T>
    static QJsonValue toJson(const T& value) {
        return value;
    }
};

template <>
struct ToJsonImpl<1> {
    template <typename T>
    static QJsonValue toJson(const T& value) {
        return value->toJson();
    }
};

template <typename T>
QJsonArray toJsonArray(const QList<T> &list)
{
    QJsonArray array;

    for(const T &item : list) {
        array.append(ToJsonImpl<QTypeInfo<T>::isPointer>::template toJson<T>(item));
    }

    return array;
}

{{#generateQObjects}}
{{classname}}::{{classname}}(QObject *parent)
: QObject(parent)
{{#vars}}, m_{{name}}({{defaultValue}})
{{/vars}}
{{/generateQObjects}}
{{^generateQObjects}}
{{classname}}::{{classname}}()
:{{#vars}} m_{{name}}({{defaultValue}}){{#hasMore}},{{/hasMore}}
{{/vars}}
{{/generateQObjects}}
{
}

{{classname}}::~{{classname}}()
{
    {{^generateQObjects}}
    {{#vars}}
    {{#vendorExtensions.x-codegen-isPointer}}
    delete m_{{name}};
    {{/vendorExtensions.x-codegen-isPointer}}
    {{#isContainer}}
    {{#vendorExtensions.x-codegen-inner-isPointer}}
    qDeleteAll(m_{{name}});
    {{/vendorExtensions.x-codegen-inner-isPointer}}
    {{/isContainer}}
    {{/vars}}
    {{/generateQObjects}}
}

QJsonObject {{classname}}::toJson() const
{
    QJsonObject jsonObject;
    {{#vars}}
    {{#vendorExtensions.x-codegen-isPointer}}
    if (m_{{name}}) {
        jsonObject.insert("{{name}}", m_{{name}}->toJson());
    }
    {{/vendorExtensions.x-codegen-isPointer}}
    {{^vendorExtensions.x-codegen-isPointer}}
    {{#isContainer}}
    jsonObject.insert("{{name}}", toJsonArray(m_{{name}}));
    {{/isContainer}}
    {{^isContainer}}
    jsonObject.insert("{{name}}", m_{{name}}{{vendorExtensions.x-codegen-toJsonFunction}});
    {{/isContainer}}
    {{/vendorExtensions.x-codegen-isPointer}}
    {{/vars}}

    return jsonObject;
}

{{#generateQObjects}}
{{classname}} *{{classname}}::fromJson(const QJsonObject &json, QObject *parent)
{{/generateQObjects}}
{{^generateQObjects}}
{{classname}} *{{classname}}::fromJson(const QJsonObject &json)
{{/generateQObjects}}
{
    {{#generateQObjects}}
    {{classname}} *p = new {{classname}}(parent);
    {{/generateQObjects}}
    {{^generateQObjects}}
    {{classname}} *p = new {{classname}};
    {{/generateQObjects}}

    {{#vars}}
    {{#vendorExtensions.x-codegen-isPointer}}
    p->{{setter}}({{baseType}}::fromJson(json.value("{{name}}").toObject()));
    {{/vendorExtensions.x-codegen-isPointer}}
    {{^vendorExtensions.x-codegen-isPointer}}
    {{#isContainer}}
    {
        {{baseType}}<{{complexType}}{{#vendorExtensions.x-codegen-inner-isPointer}} *{{/vendorExtensions.x-codegen-inner-isPointer}}> list;
        for (QJsonValue value : json.value("{{name}}").toArray()) {
        {{#vendorExtensions.x-codegen-inner-isPointer}}
            {{#generateQObjects}}
            list << {{complexType}}::fromJson(value.toObject(), parent);
            {{/generateQObjects}}
            {{^generateQObjects}}
            list << {{complexType}}::fromJson(value.toObject());
            {{/generateQObjects}}
        {{/vendorExtensions.x-codegen-inner-isPointer}}
        {{^vendorExtensions.x-codegen-inner-isPointer}}
            list << value.{{vendorExtensions.x-codegen-inner-fromJsonFunction}}();
        {{/vendorExtensions.x-codegen-inner-isPointer}}
        }
        p->{{setter}}(list);
    }
    {{/isContainer}}
    {{^isContainer}}
    p->{{setter}}(json.value("{{name}}").{{vendorExtensions.x-codegen-fromJsonFunction}}());
    {{/isContainer}}
    {{/vendorExtensions.x-codegen-isPointer}}
    {{/vars}}

    return p;
}

{{#vars}}
{{#vendorExtensions.x-codegen-inner-isPointer}}
QQmlListProperty<{{complexType}}> {{classname}}::qml{{name}}() {
    return QQmlListProperty<{{complexType}}>(this, m_{{name}});
}
{{/vendorExtensions.x-codegen-inner-isPointer}}

{{{datatype}}} {{classname}}::{{name}}() const {
    return m_{{name}};
}

void {{classname}}::{{setter}}({{{datatype}}} {{name}}) {
    if (m_{{name}} == {{name}}) {
        return;
    }

    m_{{name}} = {{name}};

{{#generateQObjects}}
    emit {{name}}Changed({{name}});
{{/generateQObjects}}
}

{{/vars}}

} /* namespace Swagger */

{{/model}}
{{/models}}
