{{>licenseInfo}}

#ifndef JSON_SERIALIZER_H_
#define JSON_SERIALIZER_H_

// Include models
{{#models}}{{#model}}#include "{{classname}}.h"
{{/model}}{{/models}}
#include <QUuid>
#include <QJsonValue>
#include <QJsonArray>
#include <QJsonObject>

namespace Swagger {

class JsonSerializer
{
public:
    JsonSerializer();
    virtual ~JsonSerializer();
{{#models}}{{#model}}
    virtual QJsonObject toJson(const {{classname}} &value);
    virtual bool fromJson({{classname}} *dst, const QJsonValue &json);
{{/model}}{{/models}}
    // Builtin types
    virtual QJsonValue toJson(const QString &string);
    virtual QJsonValue toJson(const qint32 &number);
    virtual QJsonValue toJson(const qint64 &number);
    virtual QJsonValue toJson(const float &number);
    virtual QJsonValue toJson(const double &number);
    virtual QJsonValue toJson(const bool &boolean);
    virtual QJsonValue toJson(const QDateTime &dateTime);
    virtual QJsonValue toJson(const QByteArray &byteArray);
    virtual QJsonValue toJson(const QUuid &uuid);

    virtual bool fromJson(QString *dst, const QJsonValue &value);
    virtual bool fromJson(QDateTime *dst, const QJsonValue &value);
    virtual bool fromJson(qint32 *dst, const QJsonValue &value);
    virtual bool fromJson(qint64 *dst, const QJsonValue &value);
    virtual bool fromJson(float *dst, const QJsonValue &value);
    virtual bool fromJson(double *dst, const QJsonValue &value);
    virtual bool fromJson(bool *dst, const QJsonValue &value);

    template <typename T>
    bool fromJson(QList<T> *list, const QJsonArray &array);

    template <typename T>
    bool fromJson(QMap<QString, T> *map, const QJsonObject &object);

    template <typename T>
    QJsonArray toJson(const QList<T> &list);

    template <typename T, typename V>
    T fromJson(const V &value);

    template <typename T>
    QList<T> fromJson(const QJsonArray &array);
};

template <typename T>
bool JsonSerializer::fromJson(QMap<QString, T> *map, const QJsonObject &object)
{
    for(auto iter=object.constBegin(); iter != object.constEnd(); ++iter) {
        map->insert(iter.key(), fromJson<T>(iter.value()));
    }
    return true;
}

template <typename T>
bool JsonSerializer::fromJson(QList<T> *list, const QJsonArray &array)
{
    for(const QJsonValue &value : array) {
        *list << fromJson<T>(value);
    }
    return true;
}

template <typename T>
QJsonArray JsonSerializer::toJson(const QList<T> &list)
{
    QJsonArray array;
    for (const T &item : list) {
        array.append(toJson(item));
    }
    return array;
}

template <typename T, typename V>
T JsonSerializer::fromJson(const V &value) {
    T tmp;
    fromJson(&tmp, value);
    return tmp;
}

template <typename T>
QList<T> JsonSerializer::fromJson(const QJsonArray &array) {
    QList<T> list;
    for (const QJsonValue &value : array) {
        list << fromJson<T>(value);
    }
    return list;
}

} // namespace Swagger

#endif // JSON_SERIALIZER_H_
