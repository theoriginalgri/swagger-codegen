{{>licenseInfo}}

#ifndef JSON_SERIALIZER_H_
#define JSON_SERIALIZER_H_

// Include models
{{#models}}{{#model}}#include "{{classname}}.h"
{{/model}}{{/models}}
#include <QUuid>
#include <QJsonValue>
#include <QJsonArray>

namespace Swagger {

class JsonSerializer
{
public:
    JsonSerializer();
    virtual ~JsonSerializer();
{{#models}}{{#model}}
    virtual QJsonValue toJson(const {{classname}} &value);
    virtual bool fromJson({{classname}} *dst, const QJsonValue &json);
{{/model}}{{/models}}
    // Builtin types
    virtual QJsonValue toJson(const QString &string);
    virtual QJsonValue toJson(const qint32 &number);
    virtual QJsonValue toJson(const qint64 &number);
    virtual QJsonValue toJson(const float &number);
    virtual QJsonValue toJson(const double &number);
    virtual QJsonValue toJson(const QDateTime &dateTime);
    virtual QJsonValue toJson(const QByteArray &byteArray);
    virtual QJsonValue toJson(const QUuid &uuid);

    template <typename T>
    QJsonValue toJson(const QList<T> &list);
};


template <typename T>
QJsonValue JsonSerializer::toJson(const QList<T> &list)
{
    QJsonArray array;
    for (const T &item : list) {
        array.append(toJson(item));
    }
    return array;
}

}

#endif // JSON_SERIALIZER_H_
