{{>licenseInfo}}
{{#models}}{{#model}}/*
* {{classname}}.h
*
* {{description}}
*/

#ifndef {{classname}}_PRIVATE_H_
#define {{classname}}_PRIVATE_H_

{{/model}}{{/models}}
{{#imports}}{{{import}}}
{{/imports}}
#include "{{classname}}.h"

#include <QSharedData>

{{#models}}{{#model}}
{{#cppNamespaceDeclarations}}
namespace {{this}} {
{{/cppNamespaceDeclarations}}

class {{classname}}Data : public QSharedData {
public:
    {{classname}}Data()
    : QSharedData(){{#vars}}{{#defaultValue}}, {{getter}}({{{defaultValue}}}){{/defaultValue}}{{/vars}}
    {
    }

    {{classname}}Data(const {{classname}}Data &other)
    : QSharedData(other)
    , _q_properties(other._q_properties)
    , setFields(other.setFields)
    {{#vars}}
    , {{getter}}(other.{{getter}})
    {{/vars}}
    {
    }

    ~{{classname}}Data() {
    }

    // Dynamic properties go here
    QVariantMap _q_properties;
    
    QMap<QString, bool> setFields;

    {{#vars}}
    {{#isEnum}}
    {{classname}}::{{{enumName}}} {{getter}};
    {{/isEnum}}
    {{^isEnum}}
    {{{datatype}}} {{getter}};
    {{/isEnum}}
    {{/vars}}
};

{{#cppNamespaceDeclarations}}
} // namespace {{this}}
{{/cppNamespaceDeclarations}}

#endif /* {{classname}}_PRIVATE_H_ */
{{/model}}
{{/models}}
