{{>licenseInfo}}
{{#models}}{{#model}}/*
 * {{classname}}.h
 * 
 * {{description}}
 */

#ifndef {{classname}}_H_
#define {{classname}}_H_

#include "SwaggerConfig.h"
{{/model}}{{/models}}
{{#imports}}{{{import}}}
{{/imports}}
#include <QDebug>
#include <QSharedDataPointer>

{{#models}}{{#model}}
{{#cppNamespaceDeclarations}}
namespace {{this}} {
{{/cppNamespaceDeclarations}}

class {{classname}}Data;

class {{classname}} {
    Q_GADGET
    {{#vars}}
    Q_PROPERTY({{{datatype}}} {{getter}} READ {{getter}} WRITE {{setter}})
    {{/vars}}

public:
    {{classname}}();
    {{classname}}(const {{classname}} &other);
    ~{{classname}}();

    {{classname}} &operator =(const {{classname}} &other);

    bool operator ==(const {{classname}} &cmp) const;

    void setProperty(const QString &name, const QVariant &value);
    QVariant property(const QString &name) const;

    QVariantMap toMap(bool *ok = nullptr) const;

    // Getters and setters
    {{#vars}}
    {{{datatype}}} {{getter}}() const;
    void {{setter}}(const {{{datatype}}} &{{getter}});

    {{/vars}}

    {{#vars}}{{#isContainer}}
    Q_INVOKABLE void append_{{getter}}(const {{{complexType}}} &{{getter}});
    Q_INVOKABLE int remove_{{getter}}(const {{{complexType}}} &{{getter}});
    {{/isContainer}}{{/vars}}
private:
    QSharedDataPointer<{{classname}}Data> d;
};

QDataStream &operator <<(QDataStream &out, const {{classname}} &obj);
QDataStream &operator >>(QDataStream &in, {{classname}} &obj);
QDebug operator <<(QDebug stream, const {{classname}} &obj);
{{#cppNamespaceDeclarations}}
} // namespace {{this}}
{{/cppNamespaceDeclarations}}

Q_DECLARE_TYPEINFO(Swagger::{{classname}}, Q_MOVABLE_TYPE);
Q_DECLARE_METATYPE(Swagger::{{classname}})

#endif /* {{classname}}_H_ */
{{/model}}
{{/models}}
