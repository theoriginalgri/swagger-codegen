{{>licenseInfo}}
{{#models}}{{#model}}/*
 * {{classname}}.h
 * 
 * {{description}}
 */

#ifndef {{classname}}_H_
#define {{classname}}_H_

#include "SwaggerConfig.h"
{{/model}}{{/models}}
{{#imports}}{{{import}}}
{{/imports}}
#include <QDebug>
#include <QSharedDataPointer>

{{#models}}{{#model}}
{{#cppNamespaceDeclarations}}
namespace {{this}} {
{{/cppNamespaceDeclarations}}

{{#hasVars}}
class {{classname}}Data;

class {{classname}} {
    Q_GADGET
    {{#vars}}
    {{#isEnum}}
    Q_PROPERTY({{enumName}} {{name}} READ {{getter}} WRITE {{setter}})
    {{/isEnum}}
    {{^isEnum}}
    Q_PROPERTY({{{datatype}}} {{name}} READ {{getter}} WRITE {{setter}})
    {{/isEnum}}
    {{/vars}}

public:
    {{classname}}();
    {{classname}}(const {{classname}} &other);
    ~{{classname}}();

    {{#vars}}{{#isEnum}}
    enum {{enumName}} {
        {{#allowableValues}}
        {{#enumVars}}
        {{{name}}}{{^-last}},{{/-last}}
        {{/enumVars}}
        {{/allowableValues}}
    };
    Q_ENUM({{enumName}})
    {{/isEnum}}{{/vars}}

    {{classname}} &operator =(const {{classname}} &other);

    bool operator ==(const {{classname}} &cmp) const;

    void setProperty(const QString &name, const QVariant &value);
    QVariant property(const QString &name) const;

    bool isSet(const QString &name) const;

    QVariantMap toMap(bool *ok = nullptr) const;

    // Getters and setters
    {{#vars}}{{#description}}/// {{description}}{{/description}}
    {{#isEnum}}
    {{{enumName}}} {{getter}}() const;{{#required}} // required{{/required}}
    void {{setter}}(const {{{enumName}}} &{{getter}});{{#required}} // required{{/required}}
    {{/isEnum}}
    {{^isEnum}}
    {{{datatype}}} {{getter}}() const;{{#required}} // required{{/required}}
    void {{setter}}(const {{{datatype}}} &{{getter}});{{#required}} // required{{/required}}
    {{/isEnum}}

    {{/vars}}

    {{#vars}}{{#isContainer}}
    Q_INVOKABLE void append_{{getter}}(const {{{complexType}}} &{{getter}});
    Q_INVOKABLE int remove_{{getter}}(const {{{complexType}}} &{{getter}});
    {{/isContainer}}{{/vars}}
private:
    QSharedDataPointer<{{classname}}Data> d;
};

QDataStream &operator <<(QDataStream &out, const {{classname}} &obj);
QDataStream &operator >>(QDataStream &in, {{classname}} &obj);
{{#vars}}
{{#isEnum}}
QDataStream &operator <<(QDataStream &out, {{classname}}::{{enumName}} value);
QDataStream &operator >>(QDataStream &in, {{classname}}::{{enumName}} &value);
{{/isEnum}}
{{/vars}}
QDebug operator <<(QDebug stream, const {{classname}} &obj);
{{/hasVars}}
{{^hasVars}}
{{#dataType}}typedef {{{dataType}}} {{classname}};{{/dataType}}
{{^dataType}}typedef QVariant {{classname}};{{/dataType}}
{{/hasVars}}

{{#cppNamespaceDeclarations}}
} // namespace {{this}}
{{/cppNamespaceDeclarations}}

{{#hasVars}}
Q_DECLARE_TYPEINFO(Swagger::{{classname}}, Q_MOVABLE_TYPE);
Q_DECLARE_METATYPE(Swagger::{{classname}})
{{/hasVars}}

#endif /* {{classname}}_H_ */
{{/model}}
{{/models}}
