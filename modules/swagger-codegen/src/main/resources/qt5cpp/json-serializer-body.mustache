{{>licenseInfo}}

#include "JsonSerializer.h"

#include <QJsonArray>
#include <QJsonObject>

{{#cppNamespaceDeclarations}}
namespace {{this}} {
{{/cppNamespaceDeclarations}}

JsonSerializer::JsonSerializer()
{
}

JsonSerializer::~JsonSerializer()
{
}

{{#models}}{{#model}}
QJsonObject JsonSerializer::toJson(const {{classname}} &value)
{
    QJsonObject obj;
    {{#vars}}
    {{^required}}
    if (value.isSet("{{name}}")) {
        obj.insert("{{name}}", toJson(value.{{getter}}())); // optional
    }
    {{/required}}
    {{#required}}
    obj.insert("{{name}}", toJson(value.{{getter}}())); // required
    {{/required}}
    
    {{/vars}}
    return obj;
}

bool JsonSerializer::fromJson({{classname}} *dst, const QJsonValue &json)
{
    QJsonObject obj = json.toObject();

    {{#vars}}
    {{#isContainer}}
    dst->{{setter}}(fromJson<{{{complexType}}}>(obj.value("{{name}}").toArray()));
    {{/isContainer}}
    {{^isContainer}}
    dst->{{setter}}(fromJson<{{datatype}}>(obj.value("{{name}}")));
    {{/isContainer}}
    {{/vars}}

    return true;
}
{{/model}}{{/models}}

QJsonValue JsonSerializer::toJson(const QString &string)
{
    return string;
}

QJsonValue JsonSerializer::toJson(const qint32 &number)
{
    return number;
}

QJsonValue JsonSerializer::toJson(const qint64 &number)
{
    return number;
}

QJsonValue JsonSerializer::toJson(const float &number)
{
    return number;
}

QJsonValue JsonSerializer::toJson(const double &number)
{
    return number;
}

QJsonValue JsonSerializer::toJson(const bool &boolean)
{
    return boolean;
}

QJsonValue JsonSerializer::toJson(const QDateTime &dateTime)
{
    return dateTime.toTimeSpec(Qt::OffsetFromUTC).toString(Qt::ISODateWithMs);
}

QJsonValue JsonSerializer::toJson(const QByteArray &byteArray)
{
    return QString::fromUtf8(byteArray);
}

QJsonValue JsonSerializer::toJson(const QUuid &uuid)
{
    QString uuidString = uuid.toString();
    uuidString.remove(0, 1);
    uuidString.remove(uuidString.length() - 1, 1);
    return uuidString;
}

QJsonValue JsonSerializer::toJson(const QVariant &variant)
{
    return QJsonValue::fromVariant(variant);
}

bool JsonSerializer::fromJson(QVariant *dst, const QJsonValue &value)
{
    *dst = value.toVariant();
    return true;
}

bool JsonSerializer::fromJson(QUuid *dst, const QJsonValue &value)
{
    *dst = QUuid(value.toString());
    return true;
}

bool JsonSerializer::fromJson(QByteArray *dst, const QJsonValue &value)
{
    *dst = value.toString().toUtf8();
    return true;
}

bool JsonSerializer::fromJson(QString *dst, const QJsonValue &value)
{
    *dst = value.toString();
    return true;
}

bool JsonSerializer::fromJson(QDateTime *dst, const QJsonValue &value)
{
    *dst = QDateTime::fromString(value.toString());
    return true;
}

bool JsonSerializer::fromJson(qint32 *dst, const QJsonValue &value)
{
    *dst = value.toInt();
    return true;
}

bool JsonSerializer::fromJson(qint64 *dst, const QJsonValue &value)
{
    *dst = value.toInt();
    return true;
}

bool JsonSerializer::fromJson(float *dst, const QJsonValue &value)
{
    *dst = value.toDouble();
    return true;
}

bool JsonSerializer::fromJson(double *dst, const QJsonValue &value)
{
    *dst = value.toDouble();
    return true;
}

bool JsonSerializer::fromJson(bool *dst, const QJsonValue &value)
{
    *dst = value.toBool();
    return true;
}

{{#cppNamespaceDeclarations}}
} // namespace {{this}}
{{/cppNamespaceDeclarations}}
