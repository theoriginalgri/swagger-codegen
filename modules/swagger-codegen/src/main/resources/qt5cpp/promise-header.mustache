{{>licenseInfo}}

#ifndef PROMISE_H_
#define PROMISE_H_

#include <QSharedPointer>
#include <QList>
#include <functional>

{{#cppNamespaceDeclarations}}
namespace {{this}} {
{{/cppNamespaceDeclarations}}

template <typename... T>
struct PromiseData {
    QList<std::function<void (T...)> > thens;
    //QList<std::function<void ()> > errors;

    void resolve(T... args) {
        for(auto fnc : thens) {
            fnc(args...);
        }
    }

    /*
    void reject() {
        for(auto fnc : errors) {
            fnc();
        }
    }
    */
};

template <typename... T>
class Promise
{
public:
    Promise() : m_data(new PromiseData<T...>) {
    }

    Promise &then(std::function<void (T...)> fnc) {
        m_data->thens << fnc;

        return *this;
    }

    /*
    Promise &then(std::function<void (T...)> fnc, std::function<void ()> errorHandler) {
        m_data->thens << fnc;
        m_data->errors << errorHandler;

        return *this;
    }
    */

    void resolve(T... value) {
        m_data->resolve(value...);
    }

    /*
    void reject() {
        m_data->reject();
    }
    */

private:
    QSharedPointer<PromiseData<T...> > m_data;
};

{{#cppNamespaceDeclarations}}
} // namespace {{this}}
{{/cppNamespaceDeclarations}}

#endif // PROMISE_H_
