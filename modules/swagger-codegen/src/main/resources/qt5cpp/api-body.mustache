{{>licenseInfo}}
#include "{{classname}}.h"
#include "JsonSerializer.h"

#include <QJsonObject>
#include <QJsonArray>
#include <QJsonDocument>
#include <QNetworkRequest>
#include <QNetworkReply>
#include <QUrlQuery>
#include <QHttpPart>

namespace Swagger {

static QHash<QString, QChar> collectionFormatDelimiters {
    { "csv", QLatin1Char(',') },
    { "tsv", QLatin1Char('\t') },
    { "ssv", QLatin1Char(' ') },
    { "pipes", QLatin1Char('|') },
};

template <typename T>
static QString formatCollectionParameter(const QList<T> &list, const QString &collectionFormat) {
    const QChar delimiter = collectionFormatDelimiters.value(collectionFormat);

    QString value;
    QTextStream s(&value);

    QListIterator<T> iter(list);
    while (iter.hasNext()) {
        s << iter.next();

        if (iter.hasNext()) {
            s << delimiter;
        }
    }

    return value;
}

class NetworkHelper {
public:

    void addVar(const QString &name, const QString &value) {
        m_vars.insert(name, value);
    }

    void addFile(const QString &name, const QHttpPart &part) {
        m_files.insert(name, part);
    }

    QNetworkReply *execute(const QString &method, const QNetworkRequest &request, QNetworkAccessManager *mgr) {
        if (method == "POST") {
            //return mgr->post(request);
        } else if (method == "GET") {
            return mgr->get(request);
        }

        return nullptr;
    }

private:
    QMap<QString, QString> m_vars;
    QMap<QString, QHttpPart> m_files;
};

{{classname}}::{{classname}}(QObject *parent)
: QObject(parent)
, m_config(nullptr)
{
}

{{classname}}::{{classname}}(SwaggerConfig *config, QObject *parent)
: QObject(parent)
, m_config(config)
{
}

{{classname}}::~{{classname}}()
{
}

void {{classname}}::setConfig(SwaggerConfig *config)
{
    m_config = config;
}

SwaggerConfig *{{classname}}::config() const
{
    return m_config;
}

{{#operations}}
{{#operation}}
Promise<{{nickname}}Reply> {{classname}}::{{nickname}}({{#allParams}}const {{{dataType}}} &{{paramName}}{{#hasMore}}, {{/hasMore}}{{/allParams}}) {
    QUrl url(m_config->url());
    QString fullPath = url.path() + "{{path}}";

    {{#pathParams}}
    {{=<% %>=}}
    fullPath.replace("{<%baseName%>}", QVariant::fromValue(<%paramName%>).toString());
    <%={{ }}=%>
    {{/pathParams}}

    QUrlQuery query(url);
    {{#queryParams}}
    {{^collectionFormat}}
    query.addQueryItem("{{paramName}}", QVariant::fromValue({{paramName}}).toString());
    {{/collectionFormat}}
    {{#collectionFormat}}
    query.addQueryItem("{{paramName}}", formatCollectionParameter({{paramName}}, "{{collectionFormat}}"));
    {{/collectionFormat}}
    {{/queryParams}}

    // START authentication
    {{#authMethods}}
    {{#isKeyInQuery}}
    query.addQueryItem("{{keyParamName}}", config.apiKey("{{keyParamName}}"));
    {{/isKeyInQuery}}
    {{/authMethods}}
    // END authentication

    url.setQuery(query);

    QNetworkRequest request(url);
    request.setAttribute(QNetworkRequest::FollowRedirectsAttribute, QVariant::fromValue(true));

    NetworkHelper helper;
    {{#formParams}}
    {{^isFile}}
    helper.addVar("{{baseName}}", QVariant::fromValue({{paramName}}).toString());
    {{/isFile}}
    {{#isFile}}
    helper.addFile("{{baseName}}", {{paramName}});
    {{/isFile}}
    {{/formParams}}

    JsonSerializer serializer;
    QJsonDocument doc;
    {{#bodyParams}}
    {{#isContainer}}
    doc.setArray(serializer.toJson({{paramName}}));
    {{/isContainer}}
    {{^isContainer}}
    doc.setObject(serializer.toJson({{paramName}}));
    {{/isContainer}}{{/bodyParams}}

    {{#headerParams}}
    {{#isContainer}}
    // TODO: Add container variable support for header params
    {{/isContainer}}
    {{^isContainer}}
    request.setRawHeader("{{paramName}}", QVariant::fromValue({{paramName}}).toByteArray());
    {{/isContainer}}
    {{/headerParams}}

    // START authentication
    {{#authMethods}}
    {{#isKeyInHeader}}
    request.setRawHeader("{{keyParamName}}", m_config->apiKey("{{keyParamName}}"));
    {{/isKeyInHeader}}
    {{/authMethods}}
    // END authentication

    m_config->prepareRequest(&request);

    QNetworkReply *reply = helper.execute("{{httpMethod}}", request, m_config->networkAccessManager());

    m_config->processReply(reply);

    Promise<{{nickname}}Reply> promise;

    connect(reply, &QNetworkReply::finished, [=, &promise](){
        JsonSerializer serializer;
        {{nickname}}Reply response;
        response.httpResponse = reply;

        // TODO: Error handling

        QJsonParseError error;
        QJsonDocument doc = QJsonDocument::fromJson(reply->readAll(), &error);

        int statusCode = reply->attribute(QNetworkRequest::HttpStatusCodeAttribute).toInt();
        switch(statusCode) {
        {{#responses}}
        {{#isDefault}}
        default: // {{{message}}}
        {{/isDefault}}
        {{^isDefault}}
        case {{code}}: // {{{message}}}
        {{/isDefault}}
            {
                {{#dataType}}
                serializer.fromJson(&response.http_{{code}}, doc.{{#isListContainer}}array{{/isListContainer}}{{^isListContainer}}object{{/isListContainer}}());
                {{/dataType}}
                {{^dataType}}
                response.http_{{code}} = true;
                {{/dataType}}
            }
            break;
        {{/responses}}
        }

        promise.resolve(response);

        reply->deleteLater();
    });

    return promise;
}

{{/operation}}
{{/operations}}
} /* namespace Swagger */
