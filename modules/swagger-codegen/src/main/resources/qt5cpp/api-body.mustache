{{>licenseInfo}}
#include "{{classname}}.h"
#include "JsonSerializer.h"

#include <QJsonObject>
#include <QJsonArray>
#include <QJsonDocument>
#include <QNetworkRequest>
#include <QNetworkReply>
#include <QUrlQuery>

namespace Swagger {

static QHash<QString, QChar> collectionFormatDelimiters {
    { "csv", QLatin1Char(',') },
    { "tsv", QLatin1Char('\t') },
    { "ssv", QLatin1Char(' ') },
    { "pipes", QLatin1Char('|') },
};

template <typename T>
static QString formatCollectionParameter(const QList<T> &list, const QString &collectionFormat) {
    const QChar delimiter = collectionFormatDelimiters.value(collectionFormat);

    QString value;
    QTextStream s(&value);

    QListIterator<T> iter(list);
    while (iter.hasNext()) {
        s << iter.next();

        if (iter.hasNext()) {
            s << delimiter;
        }
    }

    return value;
}

class NetworkHelper {
public:


    QNetworkReply *execute(const QString &method, const QNetworkRequest &request, QNetworkAccessManager *mgr) {
        if (method == "POST") {
            //return mgr->post(request, );
        }

        return nullptr;
    }
};

{{classname}}::{{classname}}(QObject *parent)
: QObject(parent)
, m_config(nullptr)
{
}

{{classname}}::{{classname}}(SwaggerConfig *config, QObject *parent)
: QObject(parent)
, m_config(config)
{
}

{{classname}}::~{{classname}}()
{
}

void {{classname}}::setConfig(SwaggerConfig *config)
{
    m_config = config;
}

SwaggerConfig *{{classname}}::config() const
{
    return m_config;
}

{{#operations}}
{{#operation}}
Promise<{{{returnType}}}> {{classname}}::{{nickname}}({{#allParams}}const {{{dataType}}} &{{paramName}}{{#hasMore}}, {{/hasMore}}{{/allParams}}) {
    QUrl url(m_config->url());
    QString fullPath = url.path() + "{{path}}";

    {{#pathParams}}
    {{=<% %>=}}
    fullPath.replace("{<%baseName%>}", QVariant::fromValue(<%paramName%>).toString());
    <%={{ }}=%>
    {{/pathParams}}

    QUrlQuery query(url);
    {{#queryParams}}
    {{^collectionFormat}}
    query.addQueryItem("{{paramName}}", QVariant::fromValue({{paramName}}).toString());
    {{/collectionFormat}}
    {{#collectionFormat}}
    query.addQueryItem("{{paramName}}", formatCollectionParameter({{paramName}}, "{{collectionFormat}}"));
    {{/collectionFormat}}
    {{/queryParams}}

    // START authentication
    {{#authMethods}}
    {{#isKeyInQuery}}
    query.addQueryItem("{{keyParamName}}", config.apiKey("{{keyParamName}}"));
    {{/isKeyInQuery}}
    {{/authMethods}}
    // END authentication

    url.setQuery(query);

    QNetworkRequest request(url);
    request.setAttribute(QNetworkRequest::FollowRedirectsAttribute, QVariant::fromValue(true));

    {{#formParams}}if ({{paramName}} != nullptr) {
        {{^isFile}}input.add_var("{{baseName}}", *{{paramName}});{{/isFile}}{{#isFile}}input.add_file("{{baseName}}", (*{{paramName}}).local_filename, (*{{paramName}}).request_filename, (*{{paramName}}).mime_type);{{/isFile}}
    }
    {{/formParams}}

    JsonSerializer serializer;
    QJsonDocument doc;
    {{#bodyParams}}
    {{#isContainer}}
    doc.setArray(serializer.toJson({{paramName}}).toArray());
    {{/isContainer}}
    {{^isContainer}}
    doc.setObject(serializer.toJson({{paramName}}).toObject());
    {{/isContainer}}{{/bodyParams}}

    {{#headerParams}}
    {{#isContainer}}
    // TODO: Add container variable support for header params
    {{/isContainer}}
    {{^isContainer}}
    request.setRawHeader("{{paramName}}", QVariant::fromValue({{paramName}}).toByteArray());
    {{/isContainer}}
    {{/headerParams}}

    // START authentication
    {{#authMethods}}
    {{#isKeyInHeader}}
    request.setRawHeader("{{keyParamName}}", m_config->apiKey("{{keyParamName}}"));
    {{/isKeyInHeader}}
    {{/authMethods}}
    // END authentication

    m_config->prepareRequest(&request);

    NetworkHelper helper;
    QNetworkReply *reply = helper.execute("{{httpMethod}}", request, nullptr);

    connect(reply, &QNetworkReply::finished, [=](){
        // TODO: Implementation

        {{#responses}}
        // response for {{code}} = {{message}}
        {{/responses}}

        reply->deleteLater();
    });
}

{{/operation}}
{{/operations}}
} /* namespace Swagger */
