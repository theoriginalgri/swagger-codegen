/**
 * Swagger Petstore
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

#ifndef _SWG_SWGPetApi_H_
#define _SWG_SWGPetApi_H_

#include <QHttpPart>
#include <QString>
#include "SWGApiResponse.h"
#include "SWGPet.h"
#include "Promise.h"

#include <QObject>
#include <QSharedPointer>

namespace Swagger {

struct addPetReply
{
    QNetworkReply *httpResponse = nullptr;
    int statusCode = 0;

    bool http_405 = false; // Invalid input
};

struct deletePetReply
{
    QNetworkReply *httpResponse = nullptr;
    int statusCode = 0;

    bool http_400 = false; // Invalid pet value
};

struct findPetsByStatusReply
{
    QNetworkReply *httpResponse = nullptr;
    int statusCode = 0;

    QSharedPointer<QList<SWGPet>> http_200; // successful operation
    bool http_400 = false; // Invalid status value
};

struct findPetsByTagsReply
{
    QNetworkReply *httpResponse = nullptr;
    int statusCode = 0;

    QSharedPointer<QList<SWGPet>> http_200; // successful operation
    bool http_400 = false; // Invalid tag value
};

struct getPetByIdReply
{
    QNetworkReply *httpResponse = nullptr;
    int statusCode = 0;

    QSharedPointer<SWGPet> http_200; // successful operation
    bool http_400 = false; // Invalid ID supplied
    bool http_404 = false; // Pet not found
};

struct updatePetReply
{
    QNetworkReply *httpResponse = nullptr;
    int statusCode = 0;

    bool http_400 = false; // Invalid ID supplied
    bool http_404 = false; // Pet not found
    bool http_405 = false; // Validation exception
};

struct updatePetWithFormReply
{
    QNetworkReply *httpResponse = nullptr;
    int statusCode = 0;

    bool http_405 = false; // Invalid input
};

struct uploadFileReply
{
    QNetworkReply *httpResponse = nullptr;
    int statusCode = 0;

    QSharedPointer<SWGApiResponse> http_200; // successful operation
};


class SWGPetApi : public QObject
{
    Q_OBJECT

public:
    explicit SWGPetApi(QObject *parent = Q_NULLPTR);
    SWGPetApi(SwaggerConfig *config, QObject *parent = Q_NULLPTR);
    ~SWGPetApi();

    void setConfig(SwaggerConfig *config);
    SwaggerConfig *config() const;

    Promise<addPetReply> addPet(const SWGPet &body);
    Promise<deletePetReply> deletePet(const qint64 &pet_id, const QString &api_key);
    Promise<findPetsByStatusReply> findPetsByStatus(const QList<QString> &status);
    Promise<findPetsByTagsReply> findPetsByTags(const QList<QString> &tags);
    Promise<getPetByIdReply> getPetById(const qint64 &pet_id);
    Promise<updatePetReply> updatePet(const SWGPet &body);
    Promise<updatePetWithFormReply> updatePetWithForm(const qint64 &pet_id, const QString &name, const QString &status);
    Promise<uploadFileReply> uploadFile(const qint64 &pet_id, const QString &additional_metadata, const QHttpPart &file);
    

private:
    SwaggerConfig *m_config;
};

} // namespace Swagger

#endif
