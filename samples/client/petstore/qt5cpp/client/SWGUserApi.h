/**
 * Swagger Petstore
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

#ifndef _SWG_SWGUserApi_H_
#define _SWG_SWGUserApi_H_

#include <QList>
#include <QString>
#include "SWGUser.h"
#include "Promise.h"

#include <QObject>
#include <QSharedPointer>

namespace Swagger {

struct createUserReply
{
    QNetworkReply *httpResponse = nullptr;
    int statusCode = 0;

    bool http_0 = false; // successful operation
};

struct createUsersWithArrayInputReply
{
    QNetworkReply *httpResponse = nullptr;
    int statusCode = 0;

    bool http_0 = false; // successful operation
};

struct createUsersWithListInputReply
{
    QNetworkReply *httpResponse = nullptr;
    int statusCode = 0;

    bool http_0 = false; // successful operation
};

struct deleteUserReply
{
    QNetworkReply *httpResponse = nullptr;
    int statusCode = 0;

    bool http_400 = false; // Invalid username supplied
    bool http_404 = false; // User not found
};

struct getUserByNameReply
{
    QNetworkReply *httpResponse = nullptr;
    int statusCode = 0;

    QSharedPointer<SWGUser> http_200; // successful operation
    bool http_400 = false; // Invalid username supplied
    bool http_404 = false; // User not found
};

struct loginUserReply
{
    QNetworkReply *httpResponse = nullptr;
    int statusCode = 0;

    QSharedPointer<QString> http_200; // successful operation
    bool http_400 = false; // Invalid username/password supplied
};

struct logoutUserReply
{
    QNetworkReply *httpResponse = nullptr;
    int statusCode = 0;

    bool http_0 = false; // successful operation
};

struct updateUserReply
{
    QNetworkReply *httpResponse = nullptr;
    int statusCode = 0;

    bool http_400 = false; // Invalid user supplied
    bool http_404 = false; // User not found
};


class SWGUserApi : public QObject
{
    Q_OBJECT

public:
    explicit SWGUserApi(QObject *parent = Q_NULLPTR);
    SWGUserApi(SwaggerConfig *config, QObject *parent = Q_NULLPTR);
    ~SWGUserApi();

    void setConfig(SwaggerConfig *config);
    SwaggerConfig *config() const;

    Promise<createUserReply> createUser(const SWGUser &body);
    Promise<createUsersWithArrayInputReply> createUsersWithArrayInput(const QList<SWGUser> &body);
    Promise<createUsersWithListInputReply> createUsersWithListInput(const QList<SWGUser> &body);
    Promise<deleteUserReply> deleteUser(const QString &username);
    Promise<getUserByNameReply> getUserByName(const QString &username);
    Promise<loginUserReply> loginUser(const QString &username, const QString &password);
    Promise<logoutUserReply> logoutUser();
    Promise<updateUserReply> updateUser(const QString &username, const SWGUser &body);
    

private:
    SwaggerConfig *m_config;
};

} // namespace Swagger

#endif
