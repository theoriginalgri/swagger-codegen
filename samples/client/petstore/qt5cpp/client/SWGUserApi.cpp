/**
 * Swagger Petstore
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

#include "SWGUserApi.h"
#include "SWGHelpers.h"
#include "SWGModelFactory.h"

#include <QJsonArray>
#include <QJsonDocument>

namespace Swagger {

SWGUserApi::SWGUserApi(QObject *parent)
: QObject(parent)
{
}

SWGUserApi::SWGUserApi(const SwaggerConfig &config, QObject *parent)
: QObject(parent)
, config(config)
{
}

SWGUserApi::~SWGUserApi()
{
}

Promise<> SWGUserApi::createUser(SWGUser body) {
    QString fullPath;
    fullPath.append(config.host()).append(config.basePath()).append("/user");



    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "POST");

    
    QString output = body.asJson();
    input.request_body.append(output);
    


    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGUserApi::createUserCallback);

    worker->execute(&input);
}

Promise<> SWGUserApi::createUsersWithArrayInput(QList<SWGUser> body) {
    QString fullPath;
    fullPath.append(config.host()).append(config.basePath()).append("/user/createWithArray");



    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "POST");

    
    QJsonArray* bodyArray = new QJsonArray();
    toJsonArray((QList<void*>*)body, bodyArray, QString("body"), QString("SWGUser*"));

    QJsonDocument doc(*bodyArray);
    QByteArray bytes = doc.toJson();

    input.request_body.append(bytes);



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGUserApi::createUsersWithArrayInputCallback);

    worker->execute(&input);
}

Promise<> SWGUserApi::createUsersWithListInput(QList<SWGUser> body) {
    QString fullPath;
    fullPath.append(config.host()).append(config.basePath()).append("/user/createWithList");



    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "POST");

    
    QJsonArray* bodyArray = new QJsonArray();
    toJsonArray((QList<void*>*)body, bodyArray, QString("body"), QString("SWGUser*"));

    QJsonDocument doc(*bodyArray);
    QByteArray bytes = doc.toJson();

    input.request_body.append(bytes);



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGUserApi::createUsersWithListInputCallback);

    worker->execute(&input);
}

Promise<> SWGUserApi::deleteUser(QString username) {
    QString fullPath;
    fullPath.append(config.host()).append(config.basePath()).append("/user/{username}");

    QString usernamePathParam("{"); usernamePathParam.append("username").append("}");
    fullPath.replace(usernamePathParam, stringValue(username));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "DELETE");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGUserApi::deleteUserCallback);

    worker->execute(&input);
}

Promise<SWGUser> SWGUserApi::getUserByName(QString username) {
    QString fullPath;
    fullPath.append(config.host()).append(config.basePath()).append("/user/{username}");

    QString usernamePathParam("{"); usernamePathParam.append("username").append("}");
    fullPath.replace(usernamePathParam, stringValue(username));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGUserApi::getUserByNameCallback);

    worker->execute(&input);
}

Promise<QString> SWGUserApi::loginUser(QString username, QString password) {
    QString fullPath;
    fullPath.append(config.host()).append(config.basePath()).append("/user/login");


    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("username"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(username)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("password"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(password)));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGUserApi::loginUserCallback);

    worker->execute(&input);
}

Promise<> SWGUserApi::logoutUser() {
    QString fullPath;
    fullPath.append(config.host()).append(config.basePath()).append("/user/logout");



    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGUserApi::logoutUserCallback);

    worker->execute(&input);
}

Promise<> SWGUserApi::updateUser(QString username, SWGUser body) {
    QString fullPath;
    fullPath.append(config.host()).append(config.basePath()).append("/user/{username}");

    QString usernamePathParam("{"); usernamePathParam.append("username").append("}");
    fullPath.replace(usernamePathParam, stringValue(username));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "PUT");

    
    QString output = body.asJson();
    input.request_body.append(output);
    


    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGUserApi::updateUserCallback);

    worker->execute(&input);
}

} /* namespace Swagger */
