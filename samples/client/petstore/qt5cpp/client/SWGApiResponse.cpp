/**
 * Swagger Petstore
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


#include "SWGApiResponse.h"
#include "SWGApiResponse_p.h"

namespace Swagger {

SWGApiResponse::SWGApiResponse()
: d(new SWGApiResponseData)
{
}

SWGApiResponse::SWGApiResponse(const SWGApiResponse &other)
: d(other.d)
{
}

SWGApiResponse::~SWGApiResponse()
{
}

SWGApiResponse &SWGApiResponse::operator =(const SWGApiResponse &other)
{
    d = other.d;
    return *this;
}

bool SWGApiResponse::operator ==(const SWGApiResponse &cmp) const
{
    if (d == cmp.d) {
        return true;
    }

    return (
        d->code == cmp.d->code &&
        d->type == cmp.d->type &&
        d->message == cmp.d->message
    );
}

qint32 SWGApiResponse::code() const
{
    return d->code;
}

void SWGApiResponse::setCode(const qint32 &code)
{
    d->code = code;
}

QString SWGApiResponse::type() const
{
    return d->type;
}

void SWGApiResponse::setType(const QString &type)
{
    d->type = type;
}

QString SWGApiResponse::message() const
{
    return d->message;
}

void SWGApiResponse::setMessage(const QString &message)
{
    d->message = message;
}

QDebug operator <<(QDebug stream, const SWGApiResponse &obj)
{
    QDebugStateSaver saver(stream);
    stream.nospace()
        << "code: " << obj.code() << ", "
        << "type: " << obj.type() << ", "
        << "message: " << obj.message();

    return stream;
}

} // namespace Swagger

