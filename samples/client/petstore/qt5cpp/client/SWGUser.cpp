/**
 * Swagger Petstore
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


#include "SWGUser.h"
#include "SWGUser_p.h"

namespace Swagger {

SWGUser::SWGUser()
: d(new SWGUserData)
{
}

SWGUser::SWGUser(const SWGUser &other)
: d(other.d)
{
}

SWGUser::~SWGUser()
{
}

SWGUser &SWGUser::operator =(const SWGUser &other)
{
    d = other.d;
    return *this;
}

bool SWGUser::operator ==(const SWGUser &cmp) const
{
    if (d == cmp.d) {
        return true;
    }

    return (
        d->id == cmp.d->id &&
        d->username == cmp.d->username &&
        d->firstName == cmp.d->firstName &&
        d->lastName == cmp.d->lastName &&
        d->email == cmp.d->email &&
        d->password == cmp.d->password &&
        d->phone == cmp.d->phone &&
        d->userStatus == cmp.d->userStatus
    );
}

qint64 SWGUser::id() const
{
    return d->id;
}

void SWGUser::setId(const qint64 &id)
{
    d->id = id;
}

QString SWGUser::username() const
{
    return d->username;
}

void SWGUser::setUsername(const QString &username)
{
    d->username = username;
}

QString SWGUser::firstName() const
{
    return d->firstName;
}

void SWGUser::setFirstName(const QString &firstName)
{
    d->firstName = firstName;
}

QString SWGUser::lastName() const
{
    return d->lastName;
}

void SWGUser::setLastName(const QString &lastName)
{
    d->lastName = lastName;
}

QString SWGUser::email() const
{
    return d->email;
}

void SWGUser::setEmail(const QString &email)
{
    d->email = email;
}

QString SWGUser::password() const
{
    return d->password;
}

void SWGUser::setPassword(const QString &password)
{
    d->password = password;
}

QString SWGUser::phone() const
{
    return d->phone;
}

void SWGUser::setPhone(const QString &phone)
{
    d->phone = phone;
}

qint32 SWGUser::userStatus() const
{
    return d->userStatus;
}

void SWGUser::setUserStatus(const qint32 &userStatus)
{
    d->userStatus = userStatus;
}

QDebug operator <<(QDebug stream, const SWGUser &obj)
{
    QDebugStateSaver saver(stream);
    stream.nospace()
        << "id: " << obj.id() << ", "
        << "username: " << obj.username() << ", "
        << "firstName: " << obj.firstName() << ", "
        << "lastName: " << obj.lastName() << ", "
        << "email: " << obj.email() << ", "
        << "password: " << obj.password() << ", "
        << "phone: " << obj.phone() << ", "
        << "userStatus: " << obj.userStatus();

    return stream;
}

} // namespace Swagger

