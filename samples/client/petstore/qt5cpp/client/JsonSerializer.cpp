/**
 * Swagger Petstore
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


#include "JsonSerializer.h"

#include <QJsonArray>
#include <QJsonObject>

namespace Swagger {

JsonSerializer::JsonSerializer()
{
}

JsonSerializer::~JsonSerializer()
{
}


QJsonObject JsonSerializer::toJson(const SWGApiResponse &value)
{
    QJsonObject obj;
    obj.insert("code", toJson(value.code()));
    obj.insert("type", toJson(value.type()));
    obj.insert("message", toJson(value.message()));
    return obj;
}

bool JsonSerializer::fromJson(SWGApiResponse *dst, const QJsonValue &json)
{
    QJsonObject obj = json.toObject();

    dst->setCode(fromJson<qint32>(obj.value("code")));
    dst->setType(fromJson<QString>(obj.value("type")));
    dst->setMessage(fromJson<QString>(obj.value("message")));

    return true;
}

QJsonObject JsonSerializer::toJson(const SWGCategory &value)
{
    QJsonObject obj;
    obj.insert("id", toJson(value.id()));
    obj.insert("name", toJson(value.name()));
    return obj;
}

bool JsonSerializer::fromJson(SWGCategory *dst, const QJsonValue &json)
{
    QJsonObject obj = json.toObject();

    dst->setId(fromJson<qint64>(obj.value("id")));
    dst->setName(fromJson<QString>(obj.value("name")));

    return true;
}

QJsonObject JsonSerializer::toJson(const SWGOrder &value)
{
    QJsonObject obj;
    obj.insert("id", toJson(value.id()));
    obj.insert("pet_id", toJson(value.petId()));
    obj.insert("quantity", toJson(value.quantity()));
    obj.insert("ship_date", toJson(value.shipDate()));
    obj.insert("status", toJson(value.status()));
    obj.insert("complete", toJson(value.complete()));
    return obj;
}

bool JsonSerializer::fromJson(SWGOrder *dst, const QJsonValue &json)
{
    QJsonObject obj = json.toObject();

    dst->setId(fromJson<qint64>(obj.value("id")));
    dst->setPetId(fromJson<qint64>(obj.value("pet_id")));
    dst->setQuantity(fromJson<qint32>(obj.value("quantity")));
    dst->setShipDate(fromJson<QDateTime>(obj.value("ship_date")));
    dst->setStatus(fromJson<QString>(obj.value("status")));
    dst->setComplete(fromJson<bool>(obj.value("complete")));

    return true;
}

QJsonObject JsonSerializer::toJson(const SWGPet &value)
{
    QJsonObject obj;
    obj.insert("id", toJson(value.id()));
    obj.insert("category", toJson(value.category()));
    obj.insert("name", toJson(value.name())); // required
    obj.insert("photo_urls", toJson(value.photoUrls())); // required
    obj.insert("tags", toJson(value.tags()));
    obj.insert("status", toJson(value.status()));
    return obj;
}

bool JsonSerializer::fromJson(SWGPet *dst, const QJsonValue &json)
{
    QJsonObject obj = json.toObject();

    dst->setId(fromJson<qint64>(obj.value("id")));
    dst->setCategory(fromJson<SWGCategory>(obj.value("category")));
    dst->setName(fromJson<QString>(obj.value("name")));
    dst->setPhotoUrls(fromJson<QString>(obj.value("photo_urls").toArray()));
    dst->setTags(fromJson<SWGTag>(obj.value("tags").toArray()));
    dst->setStatus(fromJson<QString>(obj.value("status")));

    return true;
}

QJsonObject JsonSerializer::toJson(const SWGTag &value)
{
    QJsonObject obj;
    obj.insert("id", toJson(value.id()));
    obj.insert("name", toJson(value.name()));
    return obj;
}

bool JsonSerializer::fromJson(SWGTag *dst, const QJsonValue &json)
{
    QJsonObject obj = json.toObject();

    dst->setId(fromJson<qint64>(obj.value("id")));
    dst->setName(fromJson<QString>(obj.value("name")));

    return true;
}

QJsonObject JsonSerializer::toJson(const SWGUser &value)
{
    QJsonObject obj;
    obj.insert("id", toJson(value.id()));
    obj.insert("username", toJson(value.username()));
    obj.insert("first_name", toJson(value.firstName()));
    obj.insert("last_name", toJson(value.lastName()));
    obj.insert("email", toJson(value.email()));
    obj.insert("password", toJson(value.password()));
    obj.insert("phone", toJson(value.phone()));
    obj.insert("user_status", toJson(value.userStatus()));
    return obj;
}

bool JsonSerializer::fromJson(SWGUser *dst, const QJsonValue &json)
{
    QJsonObject obj = json.toObject();

    dst->setId(fromJson<qint64>(obj.value("id")));
    dst->setUsername(fromJson<QString>(obj.value("username")));
    dst->setFirstName(fromJson<QString>(obj.value("first_name")));
    dst->setLastName(fromJson<QString>(obj.value("last_name")));
    dst->setEmail(fromJson<QString>(obj.value("email")));
    dst->setPassword(fromJson<QString>(obj.value("password")));
    dst->setPhone(fromJson<QString>(obj.value("phone")));
    dst->setUserStatus(fromJson<qint32>(obj.value("user_status")));

    return true;
}


QJsonValue JsonSerializer::toJson(const QString &string)
{
    return string;
}

QJsonValue JsonSerializer::toJson(const qint32 &number)
{
    return number;
}

QJsonValue JsonSerializer::toJson(const qint64 &number)
{
    return number;
}

QJsonValue JsonSerializer::toJson(const float &number)
{
    return number;
}

QJsonValue JsonSerializer::toJson(const double &number)
{
    return number;
}

QJsonValue JsonSerializer::toJson(const bool &boolean)
{
    return boolean;
}

QJsonValue JsonSerializer::toJson(const QDateTime &dateTime)
{
    return dateTime.toTimeSpec(Qt::OffsetFromUTC).toString(Qt::ISODateWithMs);
}

QJsonValue JsonSerializer::toJson(const QByteArray &byteArray)
{
    return QString::fromUtf8(byteArray);
}

QJsonValue JsonSerializer::toJson(const QUuid &uuid)
{
    return uuid.toString();
}

QJsonValue JsonSerializer::toJson(const QVariant &variant)
{
    return QJsonValue::fromVariant(variant);
}

bool JsonSerializer::fromJson(QVariant *dst, const QJsonValue &value)
{
    *dst = value.toVariant();
    return true;
}

bool JsonSerializer::fromJson(QUuid *dst, const QJsonValue &value)
{
    *dst = QUuid(value.toString());
    return true;
}

bool JsonSerializer::fromJson(QByteArray *dst, const QJsonValue &value)
{
    *dst = value.toString().toUtf8();
    return true;
}

bool JsonSerializer::fromJson(QString *dst, const QJsonValue &value)
{
    *dst = value.toString();
    return true;
}

bool JsonSerializer::fromJson(QDateTime *dst, const QJsonValue &value)
{
    *dst = QDateTime::fromString(value.toString());
    return true;
}

bool JsonSerializer::fromJson(qint32 *dst, const QJsonValue &value)
{
    *dst = value.toInt();
    return true;
}

bool JsonSerializer::fromJson(qint64 *dst, const QJsonValue &value)
{
    *dst = value.toInt();
    return true;
}

bool JsonSerializer::fromJson(float *dst, const QJsonValue &value)
{
    *dst = value.toDouble();
    return true;
}

bool JsonSerializer::fromJson(double *dst, const QJsonValue &value)
{
    *dst = value.toDouble();
    return true;
}

bool JsonSerializer::fromJson(bool *dst, const QJsonValue &value)
{
    *dst = value.toBool();
    return true;
}

} // namespace Swagger
